name: Scan docker image
permissions: read-all

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  docker-image-security-scan:
    permissions: write-all
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3.3.0

      - name: ☁️ Download latest image
        run: docker pull postgres:14

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "postgres:14"
          format: "json"
          vuln-type: "os,library"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          output: "docker-security-scan.json.tmp"

      - name: Keep only the results section
        id: update
        run: |
          if [ -f docker-security-scan.json ]; then
            cp docker-security-scan.json docker-security-scan.json.old
            #BEFORE="$(jq '.[].Vulnerabilities|length' < docker-security-scan.json)"
            jq '(.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Layer != null or .LastModifiedDate != null) ) |= del(.Layer, .LastModifiedDate) | .Results' docker-security-scan.json.tmp > docker-security-scan.json
            sed -i '/"DiffID": "sha256/d' docker-security-scan.json
            sed -i '/BEGIN PRIVATE KEY/d' docker-security-scan.json
            rm -f docker-security-scan.json.tmp
            #AFTER="$(jq '.[].Vulnerabilities|length' < docker-security-scan.json| head -1)"
            if cmp docker-security-scan.json docker-security-scan.json.old ; then
              echo "labels=No new CVE" >> "$GITHUB_OUTPUT"
              echo "no new CVE DETECTED"
            else 
              echo "labels=trivy : new CVE detected" >> "$GITHUB_OUTPUT"
              echo "trivy : new CVE detected!"
            fi
            rm docker-security-scan.json.old
          else
            echo "first run docker-security-scan.json does not exist. create one!"
            jq '(.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Layer != null or .LastModifiedDate != null) ) |= del(.Layer, .LastModifiedDate) | .Results' docker-security-scan.json.tmp > docker-security-scan.json
            sed -i '/"DiffID": "sha256/d' docker-security-scan.json
            sed -i '/BEGIN PRIVATE KEY/d' docker-security-scan.json
            rm -f docker-security-scan.json.tmp
            echo "labels=trivy : new CVE detected" >> "$GITHUB_OUTPUT"
            echo "new CVE initilized file!"

          fi
          echo "bonjour" > docker-security-scan.json

      - name: Create the Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          author: mergify-ci-bot <mergify-ci-bot@users.noreply.github.com>
          token: ${{ secrets.PAT }}
          title: "chore(docker): image security scanning report"
          labels: ${{ steps.update.outputs.labels }}
          body: >
            This is the docker image security scanning report
          branch: cve2
          base: dev
      - name: Find PRs with label
        id: find-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const label = 'trivy : new CVE detected';
            const pullRequests = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'dev',
              head: 'cve'
            });

            console.log(`Found ${pullRequests.data.length} Pull Request(s)`);

            const prWithLabel = pullRequests.data.find(pr => pr.labels.some(l => l.name === label));

            if (prWithLabel) {
              console.log(`Found PR number ${prWithLabel.number} with label ${label}`);
              return prWithLabel.number;
            } else {
              console.log(`No PR found with label ${label}`);
              return null;
            }

      - name: show PR ID
        id: show
        run: |
          echo "The PR number is ${{ steps.find-pr.outputs.result }}"   
