name: Scan docker image
permissions: read-all

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  docker-image-security-scan:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3.3.0

      - name: ☁️ Download latest image
        run: docker pull postgres:14

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "postgres:14"
          format: "json"
          vuln-type: "os,library"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          output: "docker-security-scan.json.tmp"

      - name: Keep only the results section
        id: update
        run: |
          if [ -f docker-security-scan.json ]; then
            BEFORE="$(jq '.[].Vulnerabilities|length' < docker-security-scan.json)"
            jq --raw-output '.Results | del(.[].Vulnerabilities[].Layer) | del(.[].Vulnerabilities[].LastModifiedDate)' docker-security-scan.json.tmp > docker-security-scan.json
			jq '(.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Layer != null or .LastModifiedDate != null) ) |= del(.Layer, .LastModifiedDate) | .Results' docker-security-scan.json.tmp > docker-security-scan.json
            rm -f docker-security-scan.json.tmp
            AFTER="$(jq '.[].Vulnerabilities|length' < docker-security-scan.json| head -1)"
            if [[ $BEFORE -lt $AFTER ]]; then
              echo "labels=new CVE" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "docker-security-scan.json.tmp does not exist. creating new one "
			jq '(.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Layer != null or .LastModifiedDate != null) ) |= del(.Layer, .LastModifiedDate) | .Results' docker-security-scan.json.tmp > docker-security-scan.json
          fi
